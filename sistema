Sistema bancário em python

import datetime

class Conta:
    def __init__(self, numero_conta, titular, saldo_inicial=0):
        self.numero_conta = numero_conta
        self.titular = titular
        self.saldo = saldo_inicial
        self.transacoes = [] # Armazena histórico de transações

    def depositar(self, valor):
        if valor <= 0:
            return False, "Valor de depósito deve ser positivo."
        self.saldo += valor
        self._registrar_transacao("Depósito", valor)
        return True, "Depósito realizado com sucesso."

    def sacar(self, valor):
        if valor <= 0:
            return False, "Valor de saque deve ser positivo."
        if valor > self.saldo:
            return False, "Saldo insuficiente."
        self.saldo -= valor
        self._registrar_transacao("Saque", -valor) # Valor negativo para indicar saída
        return True, "Saque realizado com sucesso."

    def transferir(self, conta_destino, valor):
        if valor <= 0:
            return False, "Valor de transferência deve ser positivo."
        if valor > self.saldo:
            return False, "Saldo insuficiente para a transferência."

        sucesso_saque, mensagem_saque = self.sacar(valor)
        if not sucesso_saque:
            return False, f"Falha ao sacar para transferência: {mensagem_saque}"

        sucesso_deposito, mensagem_deposito = conta_destino.depositar(valor)
        if not sucesso_deposito:
            # Reverter o saque se o depósito falhar
            self.depositar(valor)
            return False, f"Falha ao depositar na conta destino: {mensagem_deposito}"

        self._registrar_transacao(f"Transferência para {conta_destino.numero_conta}", -valor)
        conta_destino._registrar_transacao(f"Transferência de {self.numero_conta}", valor)
        return True, "Transferência realizada com sucesso."

    def _registrar_transacao(self, tipo, valor):
        data_hora = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.transacoes.append({"data_hora": data_hora, "tipo": tipo, "valor": valor})

    def obter_extrato(self):
        extrato = f"\n--- Extrato da Conta {self.numero_conta} ({self.titular}) ---\n"
        extrato += f"Saldo Atual: R${self.saldo:.2f}\n"
        if not self.transacoes:
            extrato += "Nenhuma transação registrada.\n"
        else:
            for t in self.transacoes:
                extrato += f"[{t['data_hora']}] {t['tipo']}: R${t['valor']:.2f}\n"
        extrato += "----------------------------------------\n"
        return extrato

    def __str__(self):
        return f"Conta: {self.numero_conta} | Titular: {self.titular} | Saldo: R${self.saldo:.2f}"

class Banco:
    def __init__(self, nome_banco):
        self.nome_banco = nome_banco
        self.contas = {} # Dicionário para armazenar contas: {numero_conta: objeto_conta}
        self.proximo_numero_conta = 1001 # Gerador simples de número de conta

    def criar_conta(self, titular, saldo_inicial=0):
        numero_conta = str(self.proximo_numero_conta)
        if numero_conta in self.contas:
            return None, "Erro ao gerar número da conta. Tente novamente." # Evita colisão, embora improvável com esse gerador
        nova_conta = Conta(numero_conta, titular, saldo_inicial)
        self.contas[numero_conta] = nova_conta
        self.proximo_numero_conta += 1
        return nova_conta, "Conta criada com sucesso!"

    def buscar_conta(self, numero_conta):
        return self.contas.get(numero_conta) # Retorna a conta ou None se não encontrada

    def exibir_menu(self):
        print(f"\n--- Bem-vindo ao {self.nome_banco} ---")
        print("1. Criar Nova Conta")
        print("2. Acessar Conta Existente")
        print("3. Sair")
        return input("Escolha uma opção: ")

    def menu_conta(self, conta):
        while True:
            print(f"\n--- Conta {conta.numero_conta} ({conta.titular}) ---")
            print("1. Depositar")
            print("2. Sacar")
            print("3. Transferir")
            print("4. Ver Extrato")
            print("5. Ver Saldo")
            print("6. Voltar ao Menu Principal")
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                try:
                    valor = float(input("Digite o valor para depósito: R$"))
                    sucesso, mensagem = conta.depositar(valor)
                    print(mensagem)
                except ValueError:
                    print("Valor inválido. Por favor, digite um número.")
            elif opcao == '2':
                try:
                    valor = float(input("Digite o valor para saque: R$"))
                    sucesso, mensagem = conta.sacar(valor)
                    print(mensagem)
                except ValueError:
                    print("Valor inválido. Por favor, digite um número.")
            elif opcao == '3':
                numero_conta_destino = input("Digite o número da conta de destino: ")
                conta_destino = self.buscar_conta(numero_conta_destino)
                if conta_destino:
                    if conta_destino.numero_conta == conta.numero_conta:
                        print("Não é possível transferir para a mesma conta.")
                        continue
                    try:
                        valor = float(input("Digite o valor para transferência: R$"))
                        sucesso, mensagem = conta.transferir(conta_destino, valor)
                        print(mensagem)
                    except ValueError:
                        print("Valor inválido. Por favor, digite um número.")
                else:
                    print("Conta de destino não encontrada.")
            elif opcao == '4':
                print(conta.obter_extrato())
            elif opcao == '5':
                print(f"Saldo atual da conta {conta.numero_conta}: R${conta.saldo:.2f}")
            elif opcao == '6':
                break
            else:
                print("Opção inválida. Tente novamente.")

# --- Execução do Sistema ---
if __name__ == "__main__":
    meu_banco = Banco("Meu Banco Digital")

    while True:
        opcao_principal = meu_banco.exibir_menu()

        if opcao_principal == '1':
            titular = input("Digite o nome do titular da nova conta: ")
            try:
                saldo_inicial = float(input("Digite o saldo inicial (opcional, padrão 0): R$") or 0)
            except ValueError:
                print("Saldo inicial inválido. Definindo como 0.")
                saldo_inicial = 0

            nova_conta, mensagem = meu_banco.criar_conta(titular, saldo_inicial)
            if nova_conta:
                print(f"{mensagem} Número da Conta: {nova_conta.numero_conta}")
                meu_banco.menu_conta(nova_conta) # Entra no menu da nova conta
            else:
                print(mensagem)
        elif opcao_principal == '2':
            numero_conta = input("Digite o número da conta para acessar: ")
            conta_acessada = meu_banco.buscar_conta(numero_conta)
            if conta_acessada:
                meu_banco.menu_conta(conta_acessada)
            else:
                print("Conta não encontrada. Verifique o número e tente novamente.")
        elif opcao_principal == '3':
            print("Obrigado por usar o Meu Banco Digital! Até mais.")
            break
        else:
            print("Opção inválida. Por favor, escolha uma opção válida.")
